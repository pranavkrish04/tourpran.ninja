I"Ã<h3 id="intro">Intro:</h3>
<p>Played InCTFj Quals this winter vacation. It was a fun filled ctf. Here we will discuss the pwn challenge called <code class="language-plaintext highlighter-rouge">leaky pipes</code>. Make sure to give the challenge a try before seeing this.</p>

<h3 id="challenge-file">Challenge file:</h3>
<p><a href="/assets/leakyinctfj/leaky_pipes">vuln binary</a> and 
<a href="/assets/leakyinctfj/leaky.c">vuln c code</a></p>

<h3 id="pre-requisites">Pre requisites:</h3>
<ul>
  <li>Basic understanding of how computers work.</li>
  <li>Know what format strings are.</li>
  <li>will to learn more from googling.</li>
</ul>

<h3 id="mitigations">Mitigations:</h3>

<p><img src="/assets/leakyinctfj/ss1.png" alt="" /></p>

<ul>
  <li>Most of the format string exploitation will have all the mitigations enabled.</li>
  <li>RELRO: GOT related stuff.</li>
  <li>Stack Canary: unique value stoping buffer overflow.</li>
  <li>NX: Makes the stack not excecutable.</li>
  <li>PIE: the binary will have different address during different runs.</li>
</ul>

<h3 id="sample-run">Sample run:</h3>
<p>Lets simply run the binary, while doing this make sure to read the c code and get comfortable with the binary as a whole.</p>

<p><img src="/assets/leakyinctfj/ss2.png" alt="" /></p>

<ul>
  <li>We can give three options (1, 2, 3) but 2 options doesnt do anything.</li>
  <li>option 1: Give an input and get same output back from the printf function.</li>
  <li>option 3: Currently unavailable since we dont have enough cash.</li>
</ul>

<h3 id="exploit-basics">Exploit Basics:</h3>
<p>Format string exploitation occurs when you use the printf function carelessly. Correct Usage of printf will be to use the format strings/ format specifiers in the first part and all the parameters in the 2nd part.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"my name is : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"giovanni giorgio"</span><span class="p">);</span>
</code></pre></div></div>
<p>Problem occurs when attackers are given access to these format strings part. So as an attacker he can specify formats which will try to retrieve values that are not specified, hence will take values from the stack. Incorrect usage.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span> <span class="c1">//buffer = user input</span>
</code></pre></div></div>

<h3 id="exploit-idea">Exploit Idea:</h3>
<p>We have to somehow go to the use_tape() Since it has our flag and another format string exploit.
```c
void use_tape(){
    char experience[50];
    char flag[50];</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FILE *fp;
fp = fopen("flag.txt", "rb");
if(fp != NULL){
fgets(flag, 50, fp);
fclose(fp);

printf("Please give us your feedback!\n");
fgets(experience, 50, stdin);
printf(experience);
exit(0); } else{
printf("Error opening file!\n");
exit(1); }```
</code></pre></div></div>
:ET